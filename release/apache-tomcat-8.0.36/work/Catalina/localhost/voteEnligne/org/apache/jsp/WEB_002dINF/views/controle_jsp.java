/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2016-12-18 19:48:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class controle_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<script\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/controle.css\"\n");
      out.write("\trel=\"stylesheet\">\n");
      out.write("<title>controle</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div id=\"startInputDiv\" class=\"startInput\">\n");
      out.write("\t\t<input class=\"codeInput\" type=\"text\" id=\"codeInput\" placeholder=\"code\" />\n");
      out.write("\t\t</br> <input class=\"passwordInput\" type=\"password\" id=\"passcodeInput\"\n");
      out.write("\t\t\tplaceholder=\"code de passe\" /></br> <input type=\"text\"\n");
      out.write("\t\t\tid=\"raspberryIpInput\" placeholder=\"IP Raspberry\"\n");
      out.write("\t\t\tclass=\"raspberryIpInput\" /> </br> <input class=\"controlButton\"\n");
      out.write("\t\t\ttype=\"button\" id=\"startSessionButton\" value=\"Commencer\"\n");
      out.write("\t\t\tonclick=\"startPollSession()\" /> <input class=\"controlButton\"\n");
      out.write("\t\t\tid=\"removeSessionButton\" type=\"button\" value=\"Arreter la Session\"\n");
      out.write("\t\t\tonclick=\"stopSession()\"></br> <span id=\"erroMessageHeader\"></span>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<div id=\"voteSessionDiv\" class=\"voteSessionDiv\" class=\"invisible\">\n");
      out.write("\t\t<div id=\"actNamesHolder\"></div>\n");
      out.write("\t\t<input class=\"invisible\" id=\"nextActButton\" type=\"button\"\n");
      out.write("\t\t\tvalue=\"prochain\" onclick=\"nextAct()\"> <input\n");
      out.write("\t\t\tclass=\"invisible\" id=\"stopButton\" type=\"button\"\n");
      out.write("\t\t\tvalue=\"arreter la session\" onclick=\"stopSession()\">\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\tvar raspberryIp = null;\n");
      out.write("\tvar voteSessionDiv = document.getElementById(\"voteSessionDiv\");\n");
      out.write("\tvar actNamesHolder = document.getElementById(\"actNamesHolder\");\n");
      out.write("\tvar currentActIndex = 0;\n");
      out.write("\tvar maxIndex;\n");
      out.write("\tvar connectedToPi = false;\n");
      out.write("\tvar codeValue = null;\n");
      out.write("\tvar passcodeValue = null;\n");
      out.write("\n");
      out.write("\tfunction startPollSession() {\n");
      out.write("\t\tcodeValue = document.getElementById('codeInput').value;\n");
      out.write("\t\tpasscodeValue = document.getElementById('passcodeInput').value;\n");
      out.write("\t\traspberryIp = \"http://\"\n");
      out.write("\t\t\t\t+ document.getElementById(\"raspberryIpInput\").value;\n");
      out.write("\t\t$\n");
      out.write("\t\t\t\t.post(\n");
      out.write("\t\t\t\t\t\t\"controle\",\n");
      out.write("\t\t\t\t\t\t{\n");
      out.write("\t\t\t\t\t\t\ttype : \"startSession\",\n");
      out.write("\t\t\t\t\t\t\tcode : document.getElementById('codeInput').value,\n");
      out.write("\t\t\t\t\t\t\tpasscode : passcodeValue = document\n");
      out.write("\t\t\t\t\t\t\t\t\t.getElementById('passcodeInput').value\n");
      out.write("\t\t\t\t\t\t},\n");
      out.write("\t\t\t\t\t\tfunction(data, status) {\n");
      out.write("\t\t\t\t\t\t\tvar jsonResult = JSON.parse(data);\n");
      out.write("\t\t\t\t\t\t\tconsole.log(data);\n");
      out.write("\t\t\t\t\t\t\tif (jsonResult.succes == true) {\n");
      out.write("\t\t\t\t\t\t\t\t$(\"#startInputDiv\").remove();\n");
      out.write("\t\t\t\t\t\t\t\tpopulateVoteSessionDiv(jsonResult.actNames);\n");
      out.write("\t\t\t\t\t\t\t\tdocument.getElementById('nextActButton').className = \"controlButton\";\n");
      out.write("\t\t\t\t\t\t\t\tdocument.getElementById('stopButton').className = \"controlButton\";\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\tdocument.getElementById('erroMessageHeader').innerHTML = jsonResult.message;\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t});\n");
      out.write("\t\tif (raspberryIp.length > 7) {\n");
      out.write("\t\t\tconsole.log(raspberryIp.length);\n");
      out.write("\t\t\tconnectToPi();\n");
      out.write("\t\t\tconnectedToPi = true;\n");
      out.write("\t\t}\n");
      out.write("\t\twindow.onbeforeunload = function() {\n");
      out.write("\t\t\t  return \"Veux tu vraiment quitter la session?\";\n");
      out.write("\t\t\t};\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction sendCommand(command) {\n");
      out.write("\t\t$.post(\"controle\", {\n");
      out.write("\t\t\ttype : \"command\",\n");
      out.write("\t\t\tcommand : command\n");
      out.write("\t\t}, function(data, status) {\n");
      out.write("\t\t\talert(\"Data: \" + data + \"\\nStatus: \" + status);\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction populateVoteSessionDiv(actNameList) {\n");
      out.write("\t\tmaxIndex = actNameList.length;\n");
      out.write("\t\tcreateActCell(actNameList[0], 'activeActCell', 0)\n");
      out.write("\t\tfor (var i = 1; i < actNameList.length; i++) {\n");
      out.write("\t\t\tcreateActCell(actNameList[i], 'actCell', i)\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction createActCell(actName, className, index) {\n");
      out.write("\t\tvar cell = document.createElement(\"INPUT\");\n");
      out.write("\t\tcell.setAttribute('type', 'text');\n");
      out.write("\t\tcell.setAttribute('id', 'actCell-' + index);\n");
      out.write("\t\tcell.setAttribute('value', actName);\n");
      out.write("\t\tcell.setAttribute('readonly', true);\n");
      out.write("\t\tcell.setAttribute('class', className);\n");
      out.write("\t\tactNamesHolder.appendChild(cell);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction nextAct() {\n");
      out.write("\t\t$.post(\"controle\", {\n");
      out.write("\t\t\ttype : \"command\",\n");
      out.write("\t\t\tcommand : \"nextAct\",\n");
      out.write("\t\t\tcode : codeValue,\n");
      out.write("\t\t\tpasscode : passcodeValue\n");
      out.write("\t\t}, function(data) {\n");
      out.write("\t\t\tvar jsonResult = JSON.parse(data);\n");
      out.write("\t\t\tconsole.log(jsonResult);\n");
      out.write("\t\t\tif (jsonResult.success == true) {\n");
      out.write("\t\t\t\tif (jsonResult.score == 0 || jsonResult.score == null) {\n");
      out.write("\t\t\t\t\tcalculatedScore = 0;\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tcalculatedScore = Math.round(jsonResult.score\n");
      out.write("\t\t\t\t\t\t\t/ jsonResult.voterCount);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tupdateActsView(jsonResult.currentActIndex, calculatedScore);\n");
      out.write("\t\t\t\tif (connectedToPi == true) {\n");
      out.write("\t\t\t\t\tsendScoreToPi(calculatedScore);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction stopSession() {\n");
      out.write("\t\tif (confirm(\"etes-vous sûr de vouloir arrêter la session\")) {\n");
      out.write("\t\t\tif (codeValue == null || passcodeValue == null) {\n");
      out.write("\t\t\t\tcodeValue = document.getElementById('codeInput').value;\n");
      out.write("\t\t\t\tpasscodeValue = document.getElementById('passcodeInput').value;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t$.post(\"controle\", {\n");
      out.write("\t\t\t\ttype : \"command\",\n");
      out.write("\t\t\t\tcommand : \"stopSession\",\n");
      out.write("\t\t\t\tcode : codeValue,\n");
      out.write("\t\t\t\tpasscode : passcodeValue\n");
      out.write("\t\t\t}, function(data) {\n");
      out.write("\t\t\t\tvar jsonResult = JSON.parse(data);\n");
      out.write("\t\t\t\tif (jsonResult.success == true) {\n");
      out.write("\t\t\t\t\tlocation.reload();\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\talert(jsonResult.message);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction updateActsView(index, score) {\n");
      out.write("\t\tdocument.getElementById('actCell-' + (index - 1)).value += \"(\"\n");
      out.write("\t\t\t\t+ score + \")\";\n");
      out.write("\t\tif (index == maxIndex) {\n");
      out.write("\t\t\t$(\"#nextActButton\").remove();\n");
      out.write("\t\t\tdocument.getElementById('actCell-' + (index - 1)).className = \"actCell\";\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tdocument.getElementById('actCell-' + (index - 1)).className = \"actCell\";\n");
      out.write("\t\t\tdocument.getElementById('actCell-' + index).className = \"activeActCell\";\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction connectToPi() {\n");
      out.write("\t\tpiPasscode = prompt(\"passcode pour le raspberryPi\");\n");
      out.write("\t\t$.post(raspberryIp + \"/connect\", {\n");
      out.write("\t\t\tpasscode : piPasscode\n");
      out.write("\t\t}, function(data) {\n");
      out.write("\t\t\tconsole.log(data);\n");
      out.write("\t\t})\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction sendScoreToPi(scoreValue) {\n");
      out.write("\t\t$.post(raspberryIp + \"/sendScore\", {\n");
      out.write("\t\t\tpasscode : piPasscode,\n");
      out.write("\t\t\tscore : scoreValue\n");
      out.write("\t\t}, function(data) {\n");
      out.write("\t\t\tconsole.log(data);\n");
      out.write("\t\t})\n");
      out.write("\t}\n");
      out.write("\tfunction nextLine() {\n");
      out.write("\t\tvoteSessionDiv.appendChild(document.createElement(\"br\"));\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
